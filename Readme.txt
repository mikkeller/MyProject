Impossible, it is a vindication which does not endeavor.

Why?(왜 개발자가 되고 싶은 거야?)

나는 UI개발을 하면서 느껴왔어, 내가 만든 요소 안에 Back-end에서 값을 뿌려주는 것을 보면 어떻게 DB에 저장이 되고 그 값을 받아 올 수 있는 건지 그 과정이 궁금했고 굉장히 신기했거든,
회사 생활을 하면서 내가 바라 본 Android, Ios, Asp, Java 개발자 그들의 직군에 각각의 언어로 구성된 세계가 너무 멋져보였어,
나는 원래 평범한 걸 싫어해, 평범한 삶을 살고 싶지는 않아, 남들처럼 보통 실력 유지하면서 보통 회사를 오래 다니다가 보통 가정을 만들고 그렇게 재미없는 삶을 살고 싶지는 않다는거야.
그래서 나는 선택했어 UI개발과 가장 가까운 JavaScript를 말이야.
JavaScript는 각각의 언어에서 장점들을 가져와 개발된 언어야, 물론 단점도 있지만 그 단점을 충분히 보완할 수 있는 기능들이 참 많아.
UI 없이 프로세스 형태로 존재하는 Back-end 보다는 UI개발을 하는 현재의 나와 가장 잘 맞는 Front-end가 더 끌렸어.


How?(어떻게 할 건데?)

- JavaScript

- React

- Redux

- Webpack
웹팩은 프로젝트의 구조를 분석하고 자바스크립트 모듈을 비롯한 관련 리소스들을 찾은 다음 이를 브라우저에서 이용할 수 있는 번들로 묶고 패킹하는 모듈 번들러(Module bundler)다.

웹팩은 빌드 툴이 아니므로 그런트(Grunt)나 걸프(Gulp) 등의 태스크 러너나 빌드 시스템과는 다르지만, 이러한 툴을 대체하면서 장점을 제공할 수 있다.
그런트나 걸프 같은 빌드 툴은 정의한 경로에서 구성과 일치하는 파일을 찾는다. 따라서 구성 파일에서 이러한 파일을 변환, 조합 및 축소 하는 작업이나 단계를 지정해야 한다.

이와 달리 웹팩은 프로젝트 전체를 한 단위로 분석한다. 즉, 지정한 메인 파일에서 시작해 자바스크립트의 require(webpack commonJS 모듈 지원)과 import(ES6)문을 참고해 프로젝트의 모든 의존성을 조사하고 로더를 이용해 처리한 후 번들로 묶은 자바스크립트 파일을 생성한다.


- Handerbars
Handlebar.js(이하 Handlebar)는 자바스크립트의 템플릿 엔진 중 하나이다. 먼저 템플릿 엔진이라 하면 프로그램 로직과 프레젠테이션 계층을 분리하기위한 수단이다.  Mustache를 기반으로 구현한 템플릿 인자, 여기서 Mustache는 콧수염모양의 {{ }} Bracket을 이용하여 data를 표현하는 것을 의미한다. 이를 이용하면 html페이지에서 HTML+Bracket의 구성으로 디자이너와 개발자가 협업할 때도 디자이너에게도 이해하기 쉬운 구조로써 협업을 하는데도 도움이 된다.


What?(뭐가 되고 싶은데?)
개발자 중에서도 Front-end 개발자라고 위에서 말했어

